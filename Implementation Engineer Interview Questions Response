#Implementation Engineer Interview Questions Response
## Question I

##Question 3

I have encounted two types of Encryption methods while learning Python which are 

- Symmetric Encryption
  -Symmetric encryption is when the same key is used for encryption. An example of script to use to achieve this is:
  import base64
import os
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

password_provided = 'password'
password = password_provided.encode()

salt = b"\xb9\x1f|}'S\xa1\x96\xeb\x154\x04\x88\xf3\xdf\x05"

kdf = PBKDF2HMAC(algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
                backend=default_backend())

key = base64.urlsafe_b64encode(kdf.derive(password))
print(key)
-Asymmetric Encryption
  - Asymetric Encription is when two different keys are used for the encryption and decryption processes.
    One of the keys is known as the private key and the other is known as the public key.
    The private key is kept secret by the owner and the public key is either shared amongst authorised recipients. 
    This is done in order to reduce the risk of data being acccessed by unauthorised parties. An example of script to use to achieve this is:
    I begin by importing the required packages:

import cryptography
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
    
    Then I generate the private and public keys
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)
public_key = private_key.public_key()
  
  I then save the generated keys by serializing them 
# private key
serial_private = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)
with open('private_noshare.pem', 'wb') as f: f.write(serial_private)
    
# public key
serial_pub = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)
with open('public_shared.pem', 'wb') as f: f.write(serial_pub)

  To store infomation like someone's age, we can encrypt it like this
data = [b'age', b'Date of birth']
public_key = read_public()
open('test.txt', "wb").close() # clear file
for encode in data:
    encrypted = public_key.encrypt(
        encode,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    
    with open('test.txt', "ab") as f: f.write(encrypted) 
   To decrypt the data I use the following script
read_data = []
private_key = read_private()
with open('test.txt', "rb") as f:
    for encrypted in f:
        read_data.append(
            private_key.decrypt(
                encrypted,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )))
# >>> read_data = [b'age', b'Date of birth']
